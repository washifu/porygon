{"version":3,"sources":["components/View.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["View","orbitControls","backgroundColor","textureURL","gltfURL","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kMAyCeA,EAnCF,WAgBX,OACE,kBAAC,SAAD,CAAQC,eAAa,EAACC,gBAAgB,OAOpC,kBAAC,QAAD,CAEEC,WAAW,iBAIb,kBAAC,OAAD,CAAMC,QAAQ,qH,OCrBLC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,WACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.3576c3a9.chunk.js","sourcesContent":["import React from \"react\";\n// import * as THREE from \"three\";\n// import { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\nimport { View3D, Box, GLTF, Plane } from \"@standard/view\";\n// import FBX from \"./FBX\";\n\nconst View = () => {\n  // const loader = new FBXLoader();\n  // loader.load(\"fbx/Samba Dancing.fbx\", obj => {\n  //   const mixer = new THREE.AnimationMixer(obj);\n  //   const action = mixer.clipAction(obj.animation[0]);\n  //   action.play();\n  //   obj.traverse(child => {\n  //     if (child.isMesh) {\n  //       child.castShadow = true;\n  //       child.receiveShadow = true;\n  //     }\n  //   });\n\n  //   // scene.add(obj);\n  // });\n\n  return (\n    <View3D orbitControls backgroundColor=\"red\">\n      {/* <Box\n        color=\"white\"\n        hoverColor=\"blue\"\n        onClick={() => console.log(\"clicked\")}\n        // textureURL=\"gsball.png\"\n      /> */}\n      <Plane\n        // textureURL=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/016cd9a5-7bee-44c1-b903-9a4867cfd9ea/d86jzvx-a4c98d43-1ea5-4f52-b830-54959f4ac788.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvMDE2Y2Q5YTUtN2JlZS00NGMxLWI5MDMtOWE0ODY3Y2ZkOWVhXC9kODZqenZ4LWE0Yzk4ZDQzLTFlYTUtNGY1Mi1iODMwLTU0OTU5ZjRhYzc4OC5wbmcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.2oGIuzxsNV1yS0pTD7GjUJmgzotLTAW2m2RFwM1p0vM\"\n        textureURL=\"./gsball.png\"\n      />\n      {/* <FBX fbxURL=\"fbx/Samba Dancing.fbx\" /> */}\n      {/* <GLTF gltfURL=\"gltf/flamingo.glb\" /> */}\n      <GLTF gltfURL=\"https://github.com/Standard-Cognition/standard-view-core/blob/master/stories/assets/gltf/flamingo.glb?raw=true\" />\n    </View3D>\n  );\n};\n\nexport default View;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport View from \"./components/View\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">PORYGON</header>\n      <View />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}